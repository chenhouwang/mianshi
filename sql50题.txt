-- 建表
-- 学生表
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
-- 课程表
CREATE TABLE `Course`(
`c_id` VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
-- 教师表
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
-- 成绩表
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id` VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);

-- 插入学生表测试数据
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
-- 课程表测试数据
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');

-- 教师表测试数据
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');

-- 成绩表测试数据
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);


-- 1、查询课程编号为01的课程比02的课程成绩高的所有学生的学号（重点）
select a.s_id,s.s_name,a.s_score,b.s_score from 
(SELECT * from score where c_id='01') as a 
inner JOIN
(SELECT * from score where c_id='02') as b
on a.s_id = b.s_id
inner join 
student as s 
on a.s_id=s.s_id
where a.s_score>b.s_score


-- 2、查询平均成绩大于60分的学生的学号和平均成绩
SELECT s_id,avg(s_score) from score 
GROUP BY s_id
having avg(s_score) > 60


-- 3、查询所有学生的学号、姓名、选课数、总成绩
SELECT a.s_id,a.s_name,count(b.s_score),
sum(case when b.s_score is null then 0 else b.s_score end)
from student as a 
left join score as b 
on a.s_id = b.s_id
GROUP BY b.s_id,a.s_name


-- 4、查询姓 张 的老师的个数
SELECT count(*)
FROM teacher
where t_name like '张%'

-- 补充：去重
select count(distinct t_name)
from teacher
where t_name like '张三'


-- 5、查询没学过 张三 老师课的学生的学号、姓名
-- 方法一:
select s_id,s_name from student
where s_id not in
(
select s_id from score
where c_id =
(
select c_id from course
where t_id =
(
SELECT t_id FROM teacher
WHERE t_name = '张三'
)
)
)
-- 方法二：
select s_id,s_name from student
where s_id not in 
(
SELECT a.s_id from score as a 
inner join course as b on a.c_id=b.c_id
inner join teacher as c on b.t_id=c.t_id 
where c.t_name='张三'
)


-- 6、查询学过 张三 老师所教的所有课的同学的学号、姓名
SELECT a.s_id,a.s_name 
from student as a 
inner join score as b on a.s_id=b.s_id
inner join course as c on b.c_id=c.c_id 
inner join teacher as d on c.t_id = d.t_id 
where d.t_name='张三'


-- 7、查询学过编号为01的课程并且也学过编号为02的课程的学生的学号、姓名
select s_id,s_name
from student where s_id in 
(
select a.s_id from 
(SELECT s_id from score where c_id = '01') as a 
inner join 
(select s_id from score where c_id = '02') as b 
on a.s_id = b.s_id 
)

SELECT length(null)
select length('12345')


-- 8、查询课程编号为02的总成绩
-- sum、avg、count函数
select sum(s_score),avg(s_score),count(*) from score 
where c_id='02'
-- 或
SELECT sum(s_score) from score 
GROUP BY c_id 
having c_id = '02'
-- 补充：查询每门课程的总成绩
select c_id,sum(s_score) from score 
GROUP BY c_id


-- 9、查询所有课程成绩小于60分的学生的学号、姓名（与题目2对比）
-- a、得出同学课程成绩小于60分的课程数
-- b、统计同学总共学了几门课
select a.s_id,e.s_name
from 
(SELECT s_id,count(s_score) as c from score 
where s_score < 60
GROUP BY s_id) as a  
inner join 
(select s_id,count(s_score) as d from score 
group by s_id) as b 
on a.s_id=b.s_id
inner join student as e 
on a.s_id=e.s_id
where a.c=b.d


-- 10、查询没有学全所有课的学生的学号、姓名
-- 错误做法（因为王菊一门课也没选，但是漏掉了）
select a.s_id,st.s_name
from
(select s_id,count(c_id) as c from score 
GROUP BY s_id 
having c !=
(
SELECT count(c_id) from course
)) as a 
inner join student as st 
on a.s_id = st.s_id
-- 正确做法
SELECT st.s_name,st.s_id,count(sc.c_id) from student as st 
left JOIN score as sc 
on st.s_id = sc.s_id
GROUP BY st.s_id 
HAVING count(sc.c_id) < 
(select count(c_id) from course)


-- 11、查询至少有一门课与学号为01的学生所学课程相同的学生的学号和姓名
select s_id,s_name from student
where s_id in 
(
select DISTINCT s_id from score
where c_id in 
(SELECT c_id from score where s_id='01')
) and s_id != '01'
-- 数据量大inner join比in效率要高
select st.s_id,st.s_name
from student as st 
inner join 
(SELECT DISTINCT s_id from score 
where c_id in 
(select c_id from score where s_id='01')) as a 
on st.s_id = a.s_id


-- 12、查询和01号同学所学课程完全相同的其他同学的学号
select s_id from student 
where s_id in 
(
select s_id from score 
where s_id != '01'
group by s_id having count(c_id) = (select count(c_id) from score where s_id='01'))
AND s_id not in 
(
select s_id from score 
where c_id not in 
(SELECT c_id from score where s_id='01')
)


-- 15、查询两门及其以上不及格课程的同学的学号、姓名及其平均成绩
SELECT st.s_id,st.s_name,avg(sc.s_score) from student as st 
inner join score as sc on st.s_id=sc.s_id
where st.s_id in 
(
SELECT a.s_id from 
(SELECT * from score where s_score < '60') as a 
GROUP BY s_id having count(c_id) >= '2'
)
group by s_id,s_name


-- 16、检索01课程分数小于60，按分数降序排列的学生信息
-- DESC:降序  ASC:升序
SELECT st.*,sc.s_score from student as st 
inner join score as sc on st.s_id=sc.s_id
where sc.c_id = '01' and sc.s_score < '60'
ORDER BY sc.s_score DESC


-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩及平均成绩
select sc.s_id,sc.s_score,b.avg_score from score as sc 
inner join 
(select s_id,avg(s_score) as avg_score from score 
group by s_id) as b
on sc.s_id = b.s_id
ORDER BY b.avg_score DESC
-- 上面这种做法各项成绩竖着显示的，我们想要的效果是所有成绩显示在一行
SELECT s_id,
max(case when c_id='01' then s_score else NULL END) as 'chinese',
max(case when c_id='02' then s_score else NULL END) as 'math',
max(case when c_id='03' then s_score else NULL END) as 'english',
avg(s_score) as avg_score from score 
group by s_id 
order by avg_score DESC


-- 18、查询各科成绩最高分、最低分和平均分；以如下形式显示：课程id，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
-- 及格为>=60，中等为70-80，优良为80-90，优秀为>90
select sc.c_id,
co.c_name,
max(sc.s_score),
min(sc.s_score),
avg(sc.s_score),
sum(case when sc.s_score>=60 then 1 else 0 END)/count(sc.s_id) as '及格率',
sum(case when sc.s_score>=70 and sc.s_score<80 then 1 else 0 END)/count(sc.s_id) as '中等率',
sum(case when sc.s_score>=80 and sc.s_score<90 then 1 else 0 END)/count(sc.s_id) as '优良率',
sum(case when sc.s_score>=90 then 1 else 0 END)/count(sc.s_id) as '优秀率'
from score as sc 
inner join course as co 
on sc.c_id=co.c_id 
GROUP BY sc.c_id 


-- 19、按各科成绩进行排序，并显示排名(重点row_number)
-- 窗口函数:
-- RANK：跳跃排序
-- DENSE_RANK：连续排序
-- row_number：没有重复值的排序[记录相等也是不重复的]可以进行分页使用。
select *,row_number()over(partition by c_id ORDER BY s_score DESC) as 'rank' 
from score

select *,rank()over(partition by c_id ORDER BY s_score DESC) as 'rank' 
from score

select *,dense_rank()over(partition by c_id ORDER BY s_score DESC) as 'rank' 
from score


-- 20、查询学生的总成绩并进行排名
select s_id,sum(s_score) from score 
group by s_id
order by sum(s_score) DESC


-- 21、查询不同老师所教不同课程平均分从高到低显示
-- 1、以课程为主体
select sc.c_id,co.c_name,avg(sc.s_score) from score as sc 
inner JOIN course as co on sc.c_id=co.c_id 
group by c_id 
ORDER BY avg(sc.s_score) DESC

-- 2、以老师为主体
SELECT  co.c_id,te.t_name,avg(sc.s_score) as avg_score from score as sc 
INNER JOIN course as co on sc.c_id=co.c_id
inner JOIN teacher as te on te.t_id=co.t_id
GROUP BY co.c_id 
ORDER BY avg_score DESC


-- 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩
select * from 
(
SELECT st.*,sc.c_id,sc.s_score,row_number() over(partition by sc.c_id order by sc.s_score) as m 
from score as sc 
inner join student as st 
on sc.s_id=st.s_id 
)
WHERE m in(2,3)


-- 23、使用分段[100,85),[85,70),[70,60),[<60]来统计各科成绩，分别统计各分数段人数：课程id和课程名称
select co.c_id,co.c_name,
sum(case when sc.s_score<=100 and sc.s_score>85 then 1 else 0 END) as "[100,85)",
count(case when sc.s_score<=85 and sc.s_score>70 then 1 else NULL END) as "[85,70)",
sum(case when sc.s_score<=70 and sc.s_score>60 then 1 else 0 END) as "[70,60)",
sum(case when sc.s_score<60 then 1 else 0 end) as "(<60)"
from score as sc 
inner join course as co 
on sc.c_id=co.c_id 
GROUP BY co.c_id 


-- 24、查询学生平均成绩及其名次
SELECT s_id,avg(s_score),row_number() over(ORDER BY avg(s_score) DESC)
from score 
GROUP BY s_id


-- 26、查询每门课被选修的学生数
SELECT c_id,count(s_id) from score 
GROUP BY c_id


-- 27、查询出只有两门课程的全部学生的学号和姓名
-- 方法一
select st.s_id,st.s_name
-- (case when count(sc.c_id)=2 then 1 else NULL END) as count_c_id
from score as sc 
inner join student as st 
on sc.s_id=st.s_id 
GROUP BY sc.s_id
-- having (case when count(sc.c_id)=2 then 1 else NULL END) is not NULL
having count(sc.c_id)=2

-- 方法二
select s_id,s_name from student
where s_id in 
(
select s_id from score 
GROUP BY s_id 
having count(c_id)=2
)


-- 28、查询男生、女生人数
-- 方法一：
select s_sex,count(distinct s_id) from student
GROUP BY s_sex
-- 方法二：
select 
sum(case when s_sex='男' then 1 else 0 END) as '男生人数',
sum(case when s_sex='女' then 1 else 0 END) as '女生人数'
FROM student
-- 方法三：
SELECT 
count(case when s_sex='男' then 1 else NULL END) as '男生人数',
count(case when s_sex='女' then 1 else NULL END) as '女生人数'
from student 


-- 29、查询名字中带有‘风’的同学
select *
from student
where s_name like '%风%'  -- 含有风字的姓名

select *
from student
where s_name like '风%'  -- 以风字开头的姓名

select *
from student
where s_name like '%风'  -- 以风字结尾的姓名


-- 31、查询1990年出生的学生名单
select * from student
where YEAR(s_birth) = 1990

SELECT MONTH(s_birth) from student

SELECT year('200903')
SELECT MONTH('20200903')
SELECT MONTH('2020-09-03')
SELECT MONTH('2020/09/03')
-- 注：以下几种形式mysql都能识别
-- YYYYMMDD
-- YYYY/MM/DD 
-- YYYY-MM-DD 
-- YYMMDD


-- 32、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
SELECT sc.s_id,st.s_name,avg(sc.s_score) from student as st 
inner join score as sc 
on st.s_id = sc.s_id 
GROUP BY sc.s_id,st.s_name 
having avg(sc.s_score)>=85


-- 33、查询每门课程的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列
SELECT sc.c_id,co.c_name,avg(sc.s_score) as avg_score from score as sc
inner join course as co 
on sc.c_id=co.c_id 
GROUP BY sc.c_id 
ORDER BY avg_score ASC,sc.c_id DESC


-- 34、查询课程名称为数学，且分数低于60的学生姓名和分数
select st.s_name,sc.s_score from score as sc 
inner join course as co 
on sc.c_id=co.c_id 
inner join student as st 
on sc.s_id=st.s_id 
where co.c_name='数学' and sc.s_score<60


-- 35、查询所有学生的课程及分数情况
select sc.c_id,st.s_name,
max(case when co.c_name='数学' then sc.s_score else NULL END) as '数学',
max(case when co.c_name='语文' then sc.s_score else NULL END) as '语文',
max(case when co.c_name='英语' then sc.s_score else NULL END) as '英语'
from score as sc 
inner join student as st 
on sc.s_id=st.s_id 
inner join course as co 
on sc.c_id=co.c_id
GROUP BY sc.s_id,st.s_name


-- 36、查询课程成绩在70分以上课程名称，分数和学生姓名
SELECT st.s_name,co.c_name,sc.s_score
from score as sc 
inner join student as st 
on sc.s_id=st.s_id 
inner join course as co 
on sc.c_id=co.c_id 
where sc.s_score>70


-- 37、查询不及格的课程并按课程号从大到小排列
SELECT sc.s_id,st.s_name,sc.c_id,co.c_name,sc.s_score
from score as sc 
inner join student as st on sc.s_id=st.s_id 
inner join course as co on sc.c_id=co.c_id 
WHERE sc.s_score < 60
order by sc.c_id DESC


-- 38、查询课程编号为03且课程成绩在80分以上的学生的学号和姓名
SELECT sc.s_id,st.s_name from score as sc 
inner join student as st 
on sc.s_id=st.s_id
where sc.c_id='03' and sc.s_score>80


-- 39、求每门课程的学生人数
select sc.c_id,co.c_name,count(sc.s_id) from score as sc 
inner join course as co 
on sc.c_id=co.c_id 
GROUP BY sc.c_id,co.c_name 


-- 40、查询选修张三老师所授课程的学生中成绩最高的学生姓名及其成绩
-- 方法一：
select st.s_name,max(sc.s_score) from score as sc 
inner join course as co 
on sc.c_id=co.c_id 
inner join teacher as te 
on co.t_id=te.t_id 
inner join student as st 
on st.s_id=sc.s_id 
where te.t_name='张三'
-- 方法二：
select st.s_name,sc.s_score from score as sc 
inner join course as co 
on sc.c_id=co.c_id 
inner join teacher as te 
on co.t_id=te.t_id 
inner join student as st 
on st.s_id=sc.s_id 
where te.t_name='张三' ORDER BY sc.s_score DESC LIMIT 0,1


-- 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
select s_id,c_id,s_score 
from score 
where s_id in 
(
select b.s_id from 
(select s_id,s_score from score 
GROUP BY s_id,s_score) as b 
inner JOIN 
(select s_id from score 
GROUP BY s_id having count(s_score) > 1) as c 
on b.s_id = c.s_id 
GROUP BY b.s_id 
HAVING count(b.s_score) = 1
)


-- 43、统计每门课程的学生选修人数(超过5人的课程才统计)
-- 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
select c_id,count(s_id) from score 
GROUP BY c_id 
HAVING count(s_id) > 5
ORDER BY count(s_id) DESC,c_id ASC 


-- 44、检索至少选修两门课程的学生学号
select s_id from score 
GROUP BY s_id
HAVING count(c_id)>=2


-- 45、查询选修了所有课程的学生信息
select st.* from score as sc 
inner JOIN student as st 
on sc.s_id=st.s_id
GROUP BY sc.s_id 
having count(c_id) >= 
(select count(c_id) from course)


-- 46、查询各学生的年龄
select s_id,YEAR(CURRENT_DATE)-YEAR(s_birth) from student

select s_id,floor(DATEDIFF(CURRENT_DATE,s_birth)/365) from student


-- 47、查询没学过"张三"老师讲授的任一门课程的学生姓名
SELECT s_name from student 
where s_id not in 
(
select s_id from score 
where c_id in 
(SELECT s_name from student 
where s_id not in 
(
select s_id from score 
where c_id in 
(
SELECT co.t_id from teacher as te 
inner join course as co 
on te.t_id=co.t_id
where te.t_name="张三"
)
)
SELECT co.t_id from teacher as te 
inner join course as co 
on te.t_id=co.t_id
where te.t_name="张三"
)
)


-- 48、查询下周过生日的学生
select now()
select date(now())
SELECT substring('2020-09-05',6,5)
select concat('2020-',substring('1990-01-20',6,5))

select * from student 
where week(concat('2020-',substring(s_birth,6,5)),1)=Week('2020-09-05',1)+1


-- 49、查询本月过生日的人
select month(s_birth) from student 
where month(s_birth) = month(current_date())

select month(s_birth) from student 
where month(s_birth) = month(now())

select current_date()
select month(current_date())


-- 50、查询下个月过生日的学生
SELECT * from student
where 
case when month(now())=12 then month(s_birth)=1 else month(s_birth)=month(now())+1 END
